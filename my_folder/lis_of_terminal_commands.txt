[venv]
	python3 -m venv venv		(создание виртуальной среды)
	source venv/bin/activate	(активация виртуальной среды)
	deactivate	(деактивация виртуальной среды)
	python3 -m venv venv --upgrade		(обновление виртуальной среды при обновлении версии питона)

[recquirements]
	pip3 freeze		(вывод на экран установленных пакетов)  	
	pip3 freeze > recquirements.txt		(создание файла с версионным списком установленных пакетов)
	pip3 install -r requirements.txt 	(установка пакетов в соответствии с версионным списком установленных пакетов)

[git]	https://contentim.ru/post/git

	(настройки перед началом работы)
		git config --global user.name "Your Name" # указать имя, которым будут подписаны коммиты
		git config --global user.email "e@w.com"  # указать электропочту, которая будет в описании коммитера
		
		git --version   
		git status
	
	(добавление изменений в index)

		git add .        # добавить в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий
		git add text.txt # добавить в индекс указанный файл (был изменён, был удалён или это новый файл)
		git add -i       # запустить интерактивную оболочку для добавления в индекс только выбранных файлов
		git add -p       # показать новые/изменённые файлы по очереди с указанием их изменений и вопросом об отслеживании/индексировании

	(Удаление изменений из индекса)

		git reset            # убрать из индекса все добавленные в него изменения (в рабочей директории все изменения сохранятся), антипод git add
		git reset readme.txt # убрать из индекса изменения указанного файла (в рабочей директории изменения сохранятся)

	(Отмена изменений)

		git checkout text.txt      # ОПАСНО: отменить изменения в файле, вернуть состояние файла, имеющееся в индексе
		git reset --hard           # ОПАСНО: отменить изменения; вернуть то, что в коммите, на который указывает HEAD (незакомиченные изменения удалены из индекса и из рабочей директории, неотслеживаемые файлы останутся на месте)
		git clean -df              # удалить неотслеживаемые файлы и директории
	
	(Коммиты)

		git commit -m "Name of commit"    # зафиксировать в коммите проиндексированные изменения (закоммитить), добавить сообщение
		git commit -a -m "Name of commit" # проиндексировать отслеживаемые файлы (ТОЛЬКО отслеживаемые, но НЕ новые файлы) и закоммитить, добавить сообщение


	(Ветки)

		git branch                 # показать список веток
		git branch -v              # показать список веток и последний коммит в каждой
		git branch new_branch      # создать новую ветку с указанным именем на текущем коммите
		git branch new_branch 5589877 # создать новую ветку с указанным именем на указанном коммите
		git branch -f master 5589877  # переместить ветку master на указанный коммит
		git branch -f master master~2 # переместить ветку master на 2 коммита назад
		git checkout new_branch    # перейти в указанную ветку
		git checkout -b new_branch # создать новую ветку с указанным именем и перейти в неё
		git checkout -B master 5589877 # переместить ветку с указанным именем на указанный коммит и перейти в неё
		git merge hotfix           # влить в ветку, в которой находимся, данные из ветки hotfix
		git merge hotfix -m "Горячая правка" # влить в ветку, в которой находимся, данные из ветки hotfix (указано сообщение коммита слияния)
		git merge hotfix --log     # влить в ветку, в которой находимся, данные из ветки hotfix, показать редактор описания коммита, добавить в него сообщения вливаемых коммитов
		git merge hotfix --no-ff   # влить в ветку, в которой находимся, данные из ветки hotfix, запретить простой сдвиг указателя, изменения из hotfix «останутся» в ней, а в активной ветке появится только коммит слияния
		git branch -d hotfix       # удалить ветку hotfix (используется, если её изменения уже влиты в главную ветку)
		git branch --merged        # показать ветки, уже слитые с активной
		git branch --no-merged     # показать ветки, не слитые с активной
		git branch -a              # показать все имеющиеся ветки (в т.ч. на удаленных репозиториях)
		git branch -m old_branch_name new_branch_name # переименовать локально ветку old_branch_name в new_branch_name
		git branch -m new_branch_name # переименовать локально ТЕКУЩУЮ ветку в new_branch_name
		git push origin :old_branch_name new_branch_name # применить переименование в удаленном репозитории
		git branch --unset-upstream # завершить процесс переименования


	(удаленный репозиторий)

		Есть два распространённых способа привязать удалённый репозиторий к локальному: по HTTPS и по SSH. Если SSH у вас не настроен (или вы не знаете что это), привязывайте удалённый репозиторий по HTTPS (адрес привязываемого репозитория должен начинаться с https://).

		git remote -v              # показать список удалённых репозиториев, связанных с локальным
		git remote remove origin   # убрать привязку удалённого репозитория с сокр. именем origin
		git remote add origin https://github.com:nicothin/test.git # добавить удалённый репозиторий (с сокр. именем origin) с указанным URL
		git remote rm origin       # удалить привязку удалённого репозитория
		git remote show origin     # получить данные об удалённом репозитории с сокращенным именем origin
		git fetch origin           # скачать все ветки с удаленного репозитория (с сокр. именем origin), но не сливать со своими ветками
		git fetch origin master    # то же, но скачивается только указанная ветка
		git checkout --track origin/github_branch # создать локальную ветку github_branch (данные взять из удалённого репозитория с сокр. именем origin, ветка github_branch) и переключиться на неё
		git push origin master     # отправить в удалённый репозиторий (с сокр. именем origin) данные своей ветки master
		git pull origin            # влить изменения с удалённого репозитория (все ветки)
		git pull origin master     # влить изменения с удалённого репозитория (только указанная ветка)

[Python]	

		python3  # вход в режим интерпритатора Python 
		exit() # выход из интерактивного приглашения равгозначно комбинации клавиш Ctrl-D для Mac OS X или Linux 


[Flask] 
		(venv) $ export FLASK_APP=learningproject.py # Установка переменной стреды FLASK_APP
													 # Если вы используете Microsoft Windows, используйте команду 'set' вместо 'export' в команде выше.
		(venv) $ flask run # Запуск Web приложения
		
		# Миграции БД https://habr.com/ru/articles/346344/

		(venv) $ flask db init  # создание репозитория миграции для приложения

		(venv) $ flask db migrate -m "users table" # Подкоманда переноса БД генерирует сценарий автоматической миграции при этом  не вносит никаких изменений в базу данных

		(venv) $ flask db upgrade # Применение изменений в БД 

		(venv) $ flask db downgrade # Отменяет последнюю миграцию


	# в режиме интерпритатора Python 






